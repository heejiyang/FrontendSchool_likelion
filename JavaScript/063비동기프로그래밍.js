// 얄코

// 동기 - 순차적
// 호준 : 로봇 청소기 돌리고(10시)
// 호준 : 빨래하고(11시)
// 호준 : 설거지하고(12시)
// 호준 : 요리한다(1시)

// 비동기 - 비순차적
// 호준 : 로봇 청소기 돌리고(10시)
// 호준 : 빨래하고(10시)
// 호준 : 설거지하고(10시)
// 호준 : 요리하려고 물도 끓이고(10시)
const one = '1';
const two = '2';
const three = '3';

console.log(one); // 1, 3출력 후 1000초 뒤 2출력
setTimeout(() => {
    console.log(two);
},1000);
console.log(three);

console.log(one); // 1, 3출력 후 바로 2출력
setTimeout(() => {
    console.log(two);
},0);
console.log(three);

// 싱글쓰레드 : 일할 수 있는 녀석이 1명 => JS

// 멀티쓰레드 : 일할 수 있는 녀석이 여러명 => 다른 언어 대부분이 지원합니다.

// 우리가 이런 비동기 프로그래밍을 왜 알아야하고, JavaScript의 실행 구조는 왜 알아야 하는가?

one() // 페이지 로드하고
two() // 서버에서 이미지와 상세 데이터를 받아오고(예 - http://test.api.weniv.co.kr/mall) - 1분
three() // 읽어온 데이터를 뿌려준다
four() // 페이지에 정적 데이터 로드


/* ------------------------------------------------
[멀티 스레드]
애플리케이션을 실행하면 운영체제로부터 실행에 필요한 메모리를 할당받아 애플리케이션이 실행되는데,
이것을 프로세스(process)라고 한다.
그리고 프로세스 내부에서 코드의 "실행 흐름"을 스레드(thread)라고 한다.

운영체제에서는 실행 중인 하나의 애플리케이션을 프로세스process라고 한다.
사용자가 애플리케이션을 실행하면 운영체제로부터 실행에 필요한 메모리를 할당받아 애플리케이션의 코드를 실행하는데
이것이 프로세스이다.

하나의 애플리케이션은 멀티 프로세스 multi process를 만들기도 한다.
예를 들어 메모장 애플리케이션을 2개 실행했다면 2개의 메모장 프로세스가 생성된 것이다.

<스레드>
운영체제는 두 가지 이상의 작업을 동시에 처리하는 멀티 태스킹(multi tasking)을 할 수 있도록 CPU 및 메모리 자원을
프로세스마다 적절히 할당해주고, 병렬로 실행시킨다.

예를 들어, 워드로 문서작업을 하면서 동시에 윈도우 미디어 플레이어로 음악을 들을 수 있다.

멀티 태스킹은 꼭 멀티 프로세스를 뜻하는 것은 아니다. 한 프로세스 내에서 멀티태스킹을 할 수 있도록 만들어진
애플리케이션도 있다. 대표적인것이 미디어 플레이어 Media player와 메신저 Messenger 입니다.
미디어 플레이어는 동영상 재생과 음악 재생이라는 두 가지 작업을 동시에 처리하고,
메신저는 채팅 기능을 제공하면서 동시에 파일 전송 기능을 수행하기도 한다.
어떻게 하나의 프로세스가 두 가지 이상의 작업을 처리할 수 있을까? 그 비밀은 멀티 스레드 multi thread에 있다.

스레드 thread는 사전적 의미로 한 가닥의 실이라는 뜻인데, 한 가지 작업을 실행하기 위해 순차적으로 실행할 코드를
실처럼 이어놓았다고 해서 유래된 이름이다.

하나의 스레드는 하나의 코드 실행 흐름이기 때문에 한 프로세스 내에 스레드가 2개라면 2개의 코드 실행 흐름이 생긴다는 의미이다.

멀티 프로세스는 운영체제에서 할당받은 자신의 메모리를 가지고 실행하기 때문에 각 프로세스는 서로 독립적이다.
따라서 하나의 프로세스에서 오류가 발생해도 다른 프로세스에 영향을 미치지 않는다.

하지만 멀티 스레드는 하나의 프로세스 내부에 생성되기 때문에 하나의 스레드가"예외를 발생시키면" 프로세스 자체가
종료될 수 있어 다른 스레드에 영향을 미치게 된다.
예를들어 멀티 프로세스인 워드와 엑셀을 동시에 사용하던 도중, 워드에 오류가 생겨 먹통이 되더라도 엑셀은 여전히
사용 가능하다.

그러나 멀티 스레드로 동작하는 메신저의 경우 파일을 전송하는 스레듯에서 예외가 발생하면 메신저 프로세스 자체가
종료되므로 채팅 스레드도 같이 종료된다. 그렇기 때문에 멀티 스레드에서는 "예외 처리 만전"을 기해야 한다.

멀티 스레드는 다양한 곳에서 사용된다. 대용량 데이터의 처리 시간을 줄이기 위해 데이터를 분할해서 병렬로 처리하기도
하고, UI를 가지고 있는 애플리케이션에서 네트워크 통신을 하기위해 사용되기도 한다.
또한 다수 클라이언트의 요청을 처리하는 서버를 개발할 떄에도 사용한다.
멀티 스레드는 애플리케이션을 개발하는데 꼭 필요한 기능이기 때문에 반드시 이해하고 활용할 수 있도록 해야한다. */